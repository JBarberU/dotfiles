# Constants
CLOUDFLARE_DNS=1.1.1.1

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

if [ -e $HOME/.zsh_custom ]; then
    export ZSH_CUSTOM=$HOME/.zsh_custom
fi

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="jbarberu"

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Function for copying files and stripping off windows style line endings
function wincp {
    tr -d '\r' < "$1" > "$2"
}

function src_if_exists {
	if [ -e "$1" ]; then
		source "$1"
        return 0
	fi
    return 1
}

function src_if_os {
	if [ "$(uname)" = "$1" ]; then
		src_if_exists "$2";
	fi
}

function epgrep() {
  ps ax -o pid,command | grep "$1";
}

function backup() {
  if type backer.py >> /dev/null; then
    backer.py
  else
    echo "backer.py not installed, do: echo \"export PATH=\$HOME/dotfiles/tools/backer_py:\$PATH\" >> \$HOME/.paths (or wherever you store the dotfiles)"
  fi
}

function maybe_backup() {
  if [ -e "$HOME/.backer.json" ]; then

    local ANS="n"

    local SETTINGS_FILE="$HOME/.backer-settings"
    if [ -e "$SETTINGS_FILE" ]; then
      if cat "$SETTINGS_FILE" | grep -e "[y,Y]" >> /dev/null; then
        ANS="y";
      fi
    else
      printf "Run backups? [Y/N] (add r for remember): "
      read read_ans
      if echo "$read_ans" | grep -e "[y,Y]" >> /dev/null; then
        ANS="y";
      else
        ANS="n"
      fi
    fi

    case "$ANS" in
      "y") backup;;
    esac

    if echo "$read_ans" | grep "r" >> /dev/null; then
      echo "$ANS" > "$SETTINGS_FILE";
    fi

  fi
}

function has_internet_connection() {
    ping -c 1 $CLOUDFLARE_DNS >> /dev/null
    return $?
}

function maybe_update() {
    if has_internet_connection
    then
        vared -p 'Would you like to update system? [Y/N]: ' -c update_ans
        case $update_ans in
            y|Y) echo 'Updating system' && sudo -k && sudo apt-get update && sudo apt-get -y upgrade;;
            *) echo 'Skipping updates';;
        esac
    else
        echo 'Unable to update, no internet connection'
    fi
    return $?
}

function natti() {
  echo "Alias natti has not been set for host $HOST"
  read "ans?Would you like to do so now? [y/n]: "
  if [[ $ans =~ ^[Yy]$ ]]
  then
      echo 'alias natti="echo \"About to update and shut down host $HOST\" && maybe_update && sudo shutdown -h now"' >> "$HOME/.aliases" && source "$HOME/.aliases"
    echo 'Alias natti created!'
  else
    echo 'Did not create alias'
  fi
}

function grep-less() {
    grep --color=always $@ | less
}

case $(uname) in
  "Darwin")
      alias pubkey="cat ~/.ssh/id_rsa.pub | pbcopy | echo \"Copied public key to clipboard...\"";;
  "Linux")
      alias pubkey="cat ~/.ssh/id_rsa.pub | xclip -selection clipboard | echo \"Copied public key to clipboard...\"";
      alias dvorak="ibus exit &> /dev/null; setxkbmap \"se(svdvorak)\" && echo \"clear Lock\\nkeycode 0x42 = Escape\\n\" | xmodmap -";
      alias se="setxkbmap se && echo \"clear Lock\\nkeycode 0x42 = Escape\\n\" | xmodmap -";
      alias ag="sudo nala"
      alias sx="startx"
      ;;
esac

alias gs="git status 2> /dev/null || (echo \"Not a git repository, doing ls instead\n\" && ls)"
alias j="jump"
alias zshreload="source ~/.zshrc"
alias tmux="tmux -u"
alias cheat="less -r \$HOME/.cheat_sheet"
alias edcheat="\$EDITOR \$HOME/.cheat_sheet"
alias edshfunc="\$EDITOR \$HOME/.sh_functions"
alias edzshrc="\$EDITOR \$HOME/.zshrc"
alias edvimrc="\$EDITOR \$HOME/.vimrc"
alias edxmonad="\$EDITOR \$HOME/.xmonad/xmonad.hs"
alias clip="CLIP=\"\$(xclip -o -selection clipboard)\" && echo Put the contents of clipboard into CLIP :\)"
alias tmuxa="tmux new-session -A -s main"
alias tmuxs="tmux new-session -A -s"
alias devd="vim \$(devdiary.py --add --latest)"
alias devdsum="devdiary.py --summarize | less"
alias venv-setup="virtualenv -p python3 .env"
alias ungrab_mouse="setxkbmap -option grab:break_actions && xdotool key XF86Ungrab"

function avenv() {
    if src_if_exists .env/bin/activate || src_if_exists .env/bin/activate; then
        # Load tab completion for west
        if type -p west >> /dev/null; then
            source <(west completion zsh)
        fi
    else
        echo "Unable to find an .env/venv directory"
    fi
}

src_if_exists "$HOME/.aliases"
src_if_exists "$HOME/.paths"
src_if_exists "$HOME/.env"
src_if_exists "$HOME/.zsh_env"
src_if_exists "$HOME/.osx_only"
src_if_exists "$HOME/.linux_only"
src_if_exists "$HOME/.sh_functions"
src_if_os "Darwin" "$HOME/.zshrc_osx"
src_if_exists "$HOME/.profile"

which pgrep >> /dev/null && pgrep ssh-agent >> /dev/null || eval `ssh-agent` >> /dev/null

# Colorized man-pages
# found here: http://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(
    bundler
    cabal
    cargo
    cp
    gem
    git
    jump
    pip
    rails
    rust
    rustup
    tmux
    web-search
    zsh-bitbake
    zsh-justfile
)
case "$(uname)" in
  "Darwin") plugins=($plugins brew);;
esac

source $ZSH/oh-my-zsh.sh
eval "$(atuin init zsh)"

autoload -Uz compinit
zstyle ':completion:*' menu select
fpath+=~/.zfunc
