#!/bin/bash

function todo() {
    local DIR_NAME="$HOME/.todo";
    local FILE_NAME="";
    case $1 in
        '-d') FILE_NAME="$DIR_NAME/todo_$(date +%F).md";;
        '-c') echo 'Clearing empty todos';
              IFS="
"
              for f in $(ls -1 "$DIR_NAME"); do
                  if [[ $(wc -l "$DIR_NAME/$f" | awk '{ print $1 }') == 4 ]]; then
                      echo "$f appears to be empty. [v]iew [c]lear or [i]gnore?: ";
                      read ANSWER;
                      case $ANSWER in
                        'v'|'V') cat "$DIR_NAME/$f";
                                 print "[c]lear or [i]gnore?: ";
                                 read ANSWER;
                                 case $ANSWER in
                                    'c'|'C') rm "$DIR_NAME/$f";;
                                 esac
                                 ;;
                        'c'|'C') rm "$DIR_NAME/$f";;
                      esac
                  fi
              done
              return;;
        *) FILE_NAME="$DIR_NAME/todo.md";;
    esac

    if [[ ! -d "$DIR_NAME" ]]; then
        mkdir "$DIR_NAME";
    fi


    if [[ ! -f "$FILE_NAME" ]]; then
        echo "# TODO\n\nCreated: $(date +%F)\n" >> "$FILE_NAME"
    fi

    vim "$FILE_NAME" +;
}

function monitor_sensors() {
  while true; do
    clear;
    sudo sensors;
    for i in {1..10}; do
      printf .;
      sleep 1;
    done;
  done
}

function net_slow() {
  local file="/tmp/net_slow"
  if [ -f "$file" ]; then
    local delay=$(cat "$file" | tr -cd '[:digit:]');
    echo "Deleting network delay $delay""ms";
    sudo tc qdisc del dev eth0 root netem delay "$delay"ms;
    rm "$file";
  fi
  if [[ "$1" != "" ]]; then
    echo "Adding network delay $1""ms";
    printf "$1" > "$file"
    sudo tc qdisc add dev eth0 root netem delay "$1"ms;
  fi
  #sudo tc qdisc del dev eth0 root netem delay 10000ms
}

function mkcpp() {
    name="$(git config user.name)"
    email="$(git config user.email)"
    boiler="// The MIT License (MIT)

// Copyright © $(date '+%Y') $name
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the “Software”), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//
//     Author(s):
//     - $name ($email)
"

    echo "Creating C++ class"
    vared -p "Namespace: " -c namespace
    vared -p "Class Name: " -c classname
    vared -p "Filename: " -c filename

    if [[ -v 1 ]]; then
        if [[ ! -d "$1" ]]; then
            echo "Directory $1 does not exist, aborting"
            return
        fi
        location="$1"
    else
        location=$(pwd)
    fi

    header="$location/$filename.h"
    src="$location/$filename.cpp"

    if [[ "$namespace" == "" ]]; then
        fq_classname="$classname"
    else
        fq_classname="$namespace::$classname"
    fi

    vared -p "Create $fq_classname in $header and $src? [Y/N]: " -c confirm
    case $confirm in
        y|Y) ;;
        *) return;;
    esac

    if [[ "$namespace" == "" ]]; then
        echo "$boiler\n#pragma once\n\nclass $classname\n{\npublic:\n\nprivate:\n\n};" >> "$header"
        echo "$boiler\n#include \"$filename.h\"\n" >> "$src"
    else
        echo "$boiler\n#pragma once\n\nnamespace $namespace\n{\nclass $classname\n{\npublic:\n\nprivate:\n\n};\n}" >> "$header"
        echo "$boiler\n#include \"$filename.h\"\n\nnamespace $namespace\n{\n\n}" >> "$src"
    fi
}
