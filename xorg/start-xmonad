#!/bin/bash

function random_bg() {
    feh --no-fehbg --bg-fill --randomize /usr/share/dotfiles/backgrounds/*
}

function bg_daemon() {
    while :
    do
        random_bg
        sleep 900
    done
}

function battery_daemon() {
    while :
    do
        case `upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'state' | awk '{ print $2}'` in
            discharging)
                echo 'Discharging'
                BATT_PERCENT=`upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'percentage' | awk '{ print $2 }' | sed 's/%//'`
                BATT_TIME=`upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep 'time to empty' | awk '{ print $4 $5 }'`
                echo $BATT_TIME
                if [[ $BATT_PERCENT -lt 10 ]]
                then
                    notify-send -u 'critical' 'Battery Low' "Current battery level is $BATT_PERCENT% ($BATT_TIME)"
                fi
                ;;
            charging)
                echo 'Charging'
                ;;
            charged)
                echo 'Fully Charged'
                ;;
        esac
        sleep 60
    done
}

# ssh-agent
eval $(ssh-agent)
nm-applet &

# Set cursor
xset s offxsetroot -cursor_name left_ptr

# Set fonts, colors etc for urxvt
xrdb ~/.Xresources

# Monitor setup
case $(hostname) in
    Loke)
        # Disable bell
        xset -b

        # Start battery daemon
        battery_daemon &

        case "$(xrandr --listmonitors | wc -l)" in
            2)
                # Set primary screen
                # Do we need to set a resolution?
                # xrandr --output eDP-1 --left-of DP-2
                ;;
            3)
                # Set primary screen
                #xrandr --output DP-2 --primary
                xrandr --output HDMI-1 --primary
                xrandr --output eDP-1 --mode 1360x768 --pos 0x432
                ;;
            *)
                >2& echo "Unhandled number of displays!"
                exit 1
        esac
        ;;
    *)
        echo "Skipping host specific initialization"
        ;;
esac

# Mouse settings
#
# Use xev to find what logical button a physical button maps to
#
DEVICE_ID=`xinput list --id-only "pointer:ELECOM TrackBall Mouse HUGE TrackBall" 2> /dev/null`
if [ "$DEVICE_ID" != "" ]
then
    xinput --set-prop $DEVICE_ID "libinput Scroll Method Enabled" 0, 0, 1
    xinput --set-prop $DEVICE_ID "libinput Button Scrolling Button" 9
    xinput --set-button-map $DEVICE_ID 1 0 1 4 5 6 7 3 0 10 11 2
fi

DEVICE_ID=`xinput list --id-only "pointer:Corsair Corsair Gaming M65 Pro RGB Mouse" 2> /dev/null`
if [ "$DEVICE_ID" != "" ]
then
    # Bind RMB to logical MMB, 8MB to RMB
    xinput --set-button-map $DEVICE_ID 1 2 2 4 5 6 7 3 9

    # enable scrolling pressing RMB and moving cursor
    xinput --set-prop $DEVICE_ID "libinput Scroll Method Enabled" 0, 0, 1
    xinput --set-prop $DEVICE_ID "libinput Button Scrolling Button" 3
fi

# Touch pad
DEVICE_ID=`xinput list --id-only "pointer:AlpsPS/2 ALPS DualPoint TouchPad" 2> /dev/null`
if [ "$DEVICE_ID" != "" ]
then
    xinput --set-prop $DEVICE_ID "libinput Tapping Enabled" 1
fi

# Enable numlock
numlockx on

# Start BG daemon
#bg_daemon &
feh --no-fehbg --bg-fill /usr/share/dotfiles/backgrounds/bg.*

# Start dunst (show notifications)
dunst &

# Start composition manager, to allow transparency
xcompmgr &

# Start Conky
conky &

#autostart &

# Start WM
xmonad

exit 0
